package com.klausw.hackerskeyboard;

import android.app.Service;
import android.content.Intent;
import android.graphics.PixelFormat;
import android.os.Handler;
import android.os.IBinder;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.LinearLayout;

public class FloatingKeyboardService extends Service {
    private WindowManager windowManager;
    private View floatingKeyboardView;
    private WindowManager.LayoutParams params;
    private ImageView resizeButton, dragHandle;
    private Handler hideHandler = new Handler();
    private Runnable hideRunnable;

    @Override
    public void onCreate() {
        super.onCreate();
        windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);
        floatingKeyboardView = LayoutInflater.from(this).inflate(R.layout.floating_keyboard, null);

        resizeButton = floatingKeyboardView.findViewById(R.id.resize_button);
        dragHandle = floatingKeyboardView.findViewById(R.id.drag_handle);

        params = new WindowManager.LayoutParams(
                800,  // Default width
                400,  // Default height
                WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,
                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
                PixelFormat.TRANSLUCENT
        );

        params.gravity = Gravity.TOP | Gravity.START;
        params.x = 100;
        params.y = 200;

        setupDragHandle();
        setupResizeButton();
        setupAutoHide();

        windowManager.addView(floatingKeyboardView, params);
    }

    private void setupDragHandle() {
        dragHandle.setOnTouchListener(new View.OnTouchListener() {
            private int initialX, initialY;
            private float initialTouchX, initialTouchY;

            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        initialX = params.x;
                        initialY = params.y;
                        initialTouchX = event.getRawX();
                        initialTouchY = event.getRawY();
                        resetAutoHide();
                        return true;
                    case MotionEvent.ACTION_MOVE:
                        params.x = initialX + (int) (event.getRawX() - initialTouchX);
                        params.y = initialY + (int) (event.getRawY() - initialTouchY);
                        windowManager.updateViewLayout(floatingKeyboardView, params);
                        return true;
                }
                return false;
            }
        });
    }

    private void setupResizeButton() {
        resizeButton.setOnTouchListener(new View.OnTouchListener() {
            private int initialWidth, initialHeight;
            private float initialTouchX, initialTouchY;

            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        initialWidth = params.width;
                        initialHeight = params.height;
                        initialTouchX = event.getRawX();
                        initialTouchY = event.getRawY();
                        resetAutoHide();
                        return true;
                    case MotionEvent.ACTION_MOVE:
                        params.width = initialWidth + (int) (event.getRawX() - initialTouchX);
                        params.height = initialHeight + (int) (event.getRawY() - initialTouchY);
                        windowManager.updateViewLayout(floatingKeyboardView, params);
                        return true;
                }
                return false;
            }
        });
    }

    private void setupAutoHide() {
        hideRunnable = new Runnable() {
            @Override
            public void run() {
                floatingKeyboardView.setVisibility(View.GONE);
            }
        };
        resetAutoHide();
    }

    private void resetAutoHide() {
        floatingKeyboardView.setVisibility(View.VISIBLE);
        hideHandler.removeCallbacks(hideRunnable);
        hideHandler.postDelayed(hideRunnable, 5000); // Auto-hide after 5 seconds
    }

    @Override
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (floatingKeyboardView != null) windowManager.removeView(floatingKeyboardView);
    }
}