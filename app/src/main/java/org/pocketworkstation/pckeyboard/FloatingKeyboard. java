package com.klausw.hackerskeyboard;

import android.content.Context;
import android.graphics.PixelFormat;
import android.os.Handler;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.WindowManager;
import android.widget.ImageView;
import android.widget.LinearLayout;

public class FloatingKeyboard {
    private final Context context;
    private final WindowManager windowManager;
    private final View floatingView;
    private final WindowManager.LayoutParams params;
    private final Handler autoHideHandler;
    private final Runnable autoHideRunnable;

    private float initialTouchX, initialTouchY;
    private int initialX, initialY;
    private boolean isResizing = false;

    public FloatingKeyboard(Context context) {
        this.context = context;
        windowManager = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        autoHideHandler = new Handler();

        // Inflate the floating keyboard layout
        floatingView = LayoutInflater.from(context).inflate(R.layout.floating_keyboard, null);

        // Set initial layout parameters
        params = new WindowManager.LayoutParams(
                WindowManager.LayoutParams.WRAP_CONTENT,
                WindowManager.LayoutParams.WRAP_CONTENT,
                WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY,
                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,
                PixelFormat.TRANSLUCENT
        );

        params.gravity = Gravity.TOP | Gravity.START;
        params.x = 100;
        params.y = 200;

        // Drag Handle
        ImageView dragHandle = floatingView.findViewById(R.id.drag_handle);
        dragHandle.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        initialX = params.x;
                        initialY = params.y;
                        initialTouchX = event.getRawX();
                        initialTouchY = event.getRawY();
                        return true;
                    case MotionEvent.ACTION_MOVE:
                        params.x = initialX + (int) (event.getRawX() - initialTouchX);
                        params.y = initialY + (int) (event.getRawY() - initialTouchY);
                        windowManager.updateViewLayout(floatingView, params);
                        resetAutoHideTimer();
                        return true;
                }
                return false;
            }
        });

        // Resize Button
        ImageView resizeButton = floatingView.findViewById(R.id.resize_button);
        resizeButton.setOnTouchListener(new View.OnTouchListener() {
            @Override
            public boolean onTouch(View v, MotionEvent event) {
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        isResizing = true;
                        initialTouchX = event.getRawX();
                        initialTouchY = event.getRawY();
                        return true;
                    case MotionEvent.ACTION_MOVE:
                        if (isResizing) {
                            params.width = Math.max(200, (int) (params.width + (event.getRawX() - initialTouchX)));
                            params.height = Math.max(100, (int) (params.height + (event.getRawY() - initialTouchY)));
                            windowManager.updateViewLayout(floatingView, params);
                            initialTouchX = event.getRawX();
                            initialTouchY = event.getRawY();
                        }
                        resetAutoHideTimer();
                        return true;
                    case MotionEvent.ACTION_UP:
                        isResizing = false;
                        return true;
                }
                return false;
            }
        });

        // Auto-hide on inactivity
        autoHideRunnable = new Runnable() {
            @Override
            public void run() {
                floatingView.setVisibility(View.GONE);
            }
        };
        resetAutoHideTimer();

        // Add view to window
        windowManager.addView(floatingView, params);
    }

    private void resetAutoHideTimer() {
        floatingView.setVisibility(View.VISIBLE);
        autoHideHandler.removeCallbacks(autoHideRunnable);
        autoHideHandler.postDelayed(autoHideRunnable, 5000); // Auto-hide after 5 sec
    }

    public void removeKeyboard() {
        if (floatingView != null) {
            windowManager.removeView(floatingView);
        }
    }
}